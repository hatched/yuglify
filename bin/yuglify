#!/usr/bin/env node

/*
Copyright (c) 2012, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://yuilibrary.com/license/
*/
var nopt = require('nopt'),
    path = require('path'),
    fs = require('fs'),
    exists = fs.existsSync || path.existsSync,
    pack = require('../package.json'),
    jsmin = require('../').jsmin,
    cssmin = require('../').cssmin,
    known = {
        type: ['css', 'js'],
        output: path,
        terminal: Boolean,
        help: Boolean,
        version: Boolean
    },
    shorts = {
        'o': ['--output'],
        't': ['--type'],
        'h': ['--help'],
        'v': ['--version']
    },
    parsed = nopt(known, shorts);

parsed.type = parsed.type || 'js'; //Default to JS files

if (parsed.version) {
    console.log(pack.version);
    process.exit(0);
}


if (parsed.help || (!parsed.argv.remain.length && !parsed.terminal)) {
    var help = [
        'yuglify@' + pack.version,
        '',
        'Usage: yuglify [OPTION]... SOURCE',
        '',
        '       yuglify ./foo.js',
        '           # Auto saves to ./foo-min.js',
        '       yuglify ./foo/foo.js ./bar/bar.js',
        '           # Auto saves to ./foo/foo-min.js and ./bar/bar-min.js',
        '       yuglify ./foo/foo.css ./bar/bar.js',
        '           # Auto saves to ./foo/foo-min.css and ./bar/bar-min.js',
        '',
        '   --help/-h       show this',
        '   --version/-v    show version',
        '   --type js|css   what type of file to compress (used with stdin)',
        '   --terminal      use stdin and stdout instead of files',
        '   --output <file> use this file when using --terminal',
        '   <files to compress>'
    ];
    console.log(help.join('\n'));
    process.exit(0);
}

if (parsed.terminal) {
    var stdin = process.openStdin(),
        data = '';

    stdin.setEncoding("utf8");
    stdin.on('data', function(buffer) {
        data += buffer;
    });
    stdin.on('end', function() {
        var compfn = (parsed.type === 'css' ? cssmin : jsmin);
        compfn(data, function(err, smashed) {
            if (err) {
                throw(err);
                process.exit(1);
            }
            if (parsed.output) {
                fs.writeFileSync(parsed.output, smashed, 'utf8');
            } else {
                process.stdout.write(smashed);
            }
        });
    });
} else {
    console.log('compressing..');
    console.log(parsed.argv.remain.join(', '));

    var out = parsed.out,
        files = parsed.argv.remain;

    //Uglify is blocking, so we will do this in sync..
    files.forEach(function(file) {
        file = path.resolve(file);
        if (exists(file)) {
            var data = fs.readFileSync(file, 'utf8'),
                ext = path.extname(file),
                out = path.join(path.dirname(file), path.basename(file).replace(ext, '') + '-min' + ext),
                compfn = (ext === '.css' ? cssmin : jsmin);

            compfn(data, function(err, smashed) {
                if (err) {
                    console.log(err); //log out the true error instead of [object Object]
                    throw(err);
                    process.exit(1);
                }
                fs.writeFileSync(out, smashed, 'utf8');
                console.log('compressed file', out);
            });
        } else {
            console.log('Failed to find', file);
            process.exit(1);
        }
    });
}
